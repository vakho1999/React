[{"/home/vakho/davaleba4/todoapp/src/index.js":"1","/home/vakho/davaleba4/todoapp/src/App.js":"2","/home/vakho/davaleba4/todoapp/src/reportWebVitals.js":"3","/home/vakho/davaleba4/todoapp/src/components/todoList.jsx":"4","/home/vakho/davaleba4/todoapp/src/components/Search.jsx":"5","/home/vakho/davaleba4/todoapp/src/components/Form.jsx":"6","/home/vakho/davaleba4/todoapp/src/components/ProgressBar.jsx":"7"},{"size":459,"mtime":1610839543853,"results":"8","hashOfConfig":"9"},{"size":1006,"mtime":1611002289531,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1610451618721,"results":"11","hashOfConfig":"9"},{"size":6435,"mtime":1611047401182,"results":"12","hashOfConfig":"9"},{"size":1018,"mtime":1610842660333,"results":"13","hashOfConfig":"9"},{"size":4090,"mtime":1611047350446,"results":"14","hashOfConfig":"9"},{"size":2230,"mtime":1611047431326,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"mrg1lb",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/home/vakho/davaleba4/todoapp/src/index.js",[],["33","34"],"/home/vakho/davaleba4/todoapp/src/App.js",[],"/home/vakho/davaleba4/todoapp/src/reportWebVitals.js",[],"/home/vakho/davaleba4/todoapp/src/components/todoList.jsx",["35","36","37","38"],"import React, { Component } from 'react';\nimport ProgressBar from './ProgressBar.jsx';\nimport FormDialog from './Form';\nimport moment from 'moment';\nclass todos extends Component{\n    constructor(props){\n        super(props)\n       \n      \n        this.state = {'showdialog':false,'columnWrapper':{height:'100%',width:'16.5%', position: 'absolute'},\n        'Progressbar':{position: 'absolute',left:'-10px',height:'200px' , width:\"250px\"}}\n        \n    \n    }\n    onDragStart = (ev, id,oldsection) => {\n        // console.log('dragstart:',id);\n        ev.dataTransfer.setData(\"id\", id);\n        ev.dataTransfer.setData(\"oldsection\", oldsection);\n    }\n    // componentDidMount(){\n    //     setTimeout(() => {\n    //         const todolists = this.props.todolist.todolist\n    //         this.progressValue = [todolists['Backlog'],todolists['To Do'],todolists['In Progress'],todolists['Done']].map(section => {\n    //             return section.items.length\n    //         })\n\n    //         console.log(this.progressValue)\n    //     },.bind(this), 1000);\n       \n    // }\n  \n    \n    \n    onDragOver = (ev) => {\n        ev.preventDefault();\n    }\n\n    onDrop = (ev, section) => {\n       let id = ev.dataTransfer.getData(\"id\");\n       let oldsection = ev.dataTransfer.getData(\"oldsection\");\n       var {todolist,setTodolist} = this.props.todolist\n       let card =  todolist[oldsection].items[id]\n       todolist[oldsection].items.splice(id, 1)\n       todolist[section].items.push(card)\n       setTodolist({...todolist})\n    }\n\n    handleDelete(e){\n        var index = e.target.attributes.index.value\n        var {todolist,setTodolist} = this.props.todolist\n        // console.log(e.target.attributes.index.value)\n        todolist[e.target.attributes.section.value].items.splice(index, 1)\n        setTodolist({...todolist})\n        \n    }\n    content(){\n        const {todolist,setTodolist} = this.props.todolist\n        const searchtext = this.props.searchtext\n        const lists = \n        Object.entries(todolist).map((i)=>{\n                const pulse = false ? 'pulse' : '' \n                return <div  onDragOver={(e)=>this.onDragOver(e)}\n                onDrop={(e)=>{this.onDrop(e, i[0])}} key={Math.random()} className=\"col s3 m3\">\n                <div style={this.state.columnWrapper}>\n                </div>\n            \n                <div className={`card-panel ${i[1]['color']} darken-1 z-depth-5  `} style={{justifyContent:'space-between',display:'flex'}} >\n                <span className=\"card-title white-text\">{i[0]}  </span>\n                <FormDialog section={i[0]} Title={''} content={''} selectedDate={new Date()} todolist={{todolist,setTodolist}} className={`btn-floating btn-large waves-effect waves-light ${i[1]['color']} ${pulse} `}/>\n\n                </div>\n                {\n                searchtext.length === 0 ?\n                i[1]['items'].map((item,index)=>{\n                    // console.log(item)\n                    return (\n                     <div onDragStart = {(e) => this.onDragStart(e, index,i[0])}\n                     draggable key={Math.random()} className={`card ${i[1]['color']} lighten-1 z-depth-3`} style={{borderRadius:'8%',cursor:'grab'}}>\n                     <div className=\"card-content white-text\" >\n                     <span className=\"card-title \">{item['title']} <h6 >{moment(item['selectedDate']).format('DD-MM HH : mm')} </h6></span>\n                     <p>{item['context']}</p>\n                     </div>\n                     <div className=\"card-action\" style={{justifyContent:'space-between',display:'flex',borderRadius:'50%'}}>\n                     <a className={`btn-floating btn-large waves-effect waves-light ${i[1]['color']}`}><i  index={index} section={i[0]}  onClick={this.handleDelete.bind(this)} className=\"material-icons\">delete_forever</i></a>\n                     <FormDialog section={i[0]} Title={item['title']} content={item['context']} selectedDate={item['selectedDate']} todolist={{todolist,setTodolist}} className={`btn-floating btn-large waves-effect waves-light ${i[1]['color']} ${pulse} `}/>\n\n                     {item['selectedDate'] <= new Date() &&<a className=\"btn-floating btn-large waves-effect waves-light black ligthen-1 pulse\"><i className=\"material-icons\">access_alarm</i></a>}\n                     </div>\n                 </div>\n                    )\n                })\n                : \n                i[1]['items'].filter((item) =>  item.title.includes(searchtext)).map((item,index)=>{\n                    // console.log(item)\n                    return (\n                     <div onDragStart = {(e) => this.onDragStart(e, index,i[0])}\n                     draggable key={Math.random()} className={`card ${i[1]['color']} lighten-1 z-depth-3`} style={{borderRadius:'8%',cursor:'grab'}}>\n                     <div className=\"card-content white-text\" >\n                     <span className=\"card-title\">{item['title']} <h6 >{moment(item['selectedDate']).format('DD-MM HH : mm')} </h6></span>\n                     <p>{item['context']}</p>\n                     </div>\n                     <div className=\"card-action\" style={{justifyContent:'space-between',display:'flex',borderRadius:'50%'}}>\n                     <a className={`btn-floating btn-large waves-effect waves-light ${i[1]['color']}`}><i  index={index} section={i[0]}  onClick={this.handleDelete.bind(this)} className=\"material-icons\">delete_forever</i></a>\n                     <FormDialog section={i[0]} Title={item['title']} content={item['context']} selectedDate={item['selectedDate']}  todolist={{todolist,setTodolist}} className={`btn-floating btn-large waves-effect waves-light ${i[1]['color']} ${pulse} `}/>\n\n                     {item['selectedDate'] <= new Date() &&<a className=\"btn-floating btn-large waves-effect waves-light black ligthen-1 pulse tooltipped\" data-position=\"bottom\" data-tooltip=\"I am a tooltip\" ><i className=\"material-icons\">access_alarm</i></a>}\n                     </div>\n                 </div>\n                    )\n                })\n                }\n               \n            \n            </div>\n            })\n        return lists;\n    }\n\n    render(){\n       return (\n        <div className=\"row\">\n            <div style={this.state.Progressbar} className=\"col s3 m3\">\n            <ProgressBar value={this.props.todolist} />\n            </div>\n            {this.content()}\n        </div>\n       )\n    }\n\n}\nexport  {todos};","/home/vakho/davaleba4/todoapp/src/components/Search.jsx",[],"/home/vakho/davaleba4/todoapp/src/components/Form.jsx",["39","40"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DateFnsUtils from '@date-io/date-fns';\n// import DialogContentText from '@material-ui/core/DialogContentText';\n// import TextareaAutosize from '@material-ui/core/TextareaAutosize';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport {\n\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n  MuiPickersUtilsProvider \n\n} from '@material-ui/pickers';\n\nexport default function FormDialog(props) { \n  const [open, setOpen] = React.useState(false);\n  const [title,setTitle] = React.useState(props.Title);\n  const [selectedDate, setSelectedDate] = React.useState(new Date(props.selectedDate));\n  const [content,setContent] = React.useState(props.content);\n  const {todolist,setTodolist} = props.todolist\n  const [update,setUpdate] = React.useState(title.length > 0 || content.length > 0 );\n  const section = props.section\n  // console.log({title})\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  \n  const handleClose = () => {\n    setOpen(false);\n  };\n  Array.prototype.insert = function ( index, item ) {\n    this.splice( index, 1, item );\n  };\n  const Handleupdate = () => {\n    const index = todolist[section]['items'].findIndex(item =>  item.title === title)\n    todolist[section]['items'].insert(index,{'title':title,'context':content,'selectedDate':selectedDate})\n    setTodolist({...todolist})\n    \n    // console.log({...todolist})\n  \n    \n  }\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n  };\n\n  const Handlepush = () => {\n    todolist[section]['items'].push({'title':title,'context':content,'selectedDate':selectedDate})\n    setTodolist({...todolist})\n    setUpdate(true)\n    // console.log({...todolist})\n    \n    \n  }\n\n  return (\n    <div>\n      <a  className={props.className} onClick={handleClickOpen}>\n      <i className=\"material-icons\">add</i>\n      </a>\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Section: {props.section}</DialogTitle>\n        <DialogContent>\n         \n          <TextField\n            autoFocus\n            value={title}\n            onChange={e => setTitle(e.target.value) }\n            id=\"text\"\n            required\n            label=\"Title\"\n            type=\"text\"\n            fullWidth\n          />\n          <br></br>\n          <br></br>\n          <br></br>\n        <TextField\n          id=\"outlined-multiline-static\"\n          label=\"Multiline\"\n          multiline\n          required \n          rows={8}\n          value={content}\n          onChange={e => setContent(e.target.value) }\n          variant=\"outlined\"\n          fullWidth\n        />\n        <div style={{display:'flex'}}>\n      \n        <div >\n       <MuiPickersUtilsProvider utils={DateFnsUtils}>\n       <KeyboardDatePicker\n          id=\"date-picker-dialog\"\n          label=\"Date\"\n          format=\"MM/dd/yyyy\"\n          value={selectedDate}\n          onChange={handleDateChange}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n        />\n         <KeyboardTimePicker\n          \n           id=\"time-picker\"\n           label=\"Time\"\n           value={selectedDate}\n           onChange={handleDateChange}\n          KeyboardButtonProps={{\n            'aria-label': 'change time',\n          }}\n        />\n      </MuiPickersUtilsProvider>\n      </div>\n        </div>\n        \n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          {update\n          ?\n          <Button onClick={Handleupdate} color=\"secondary\">\n          update\n        </Button>\n        :\n        <Button onClick={Handlepush} color=\"secondary\">\n        submit\n      </Button>\n          \n        }\n          \n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","/home/vakho/davaleba4/todoapp/src/components/ProgressBar.jsx",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":84,"column":22,"nodeType":"47","endLine":84,"endColumn":104},{"ruleId":"45","severity":1,"message":"46","line":87,"column":60,"nodeType":"47","endLine":87,"endColumn":145},{"ruleId":"45","severity":1,"message":"46","line":103,"column":22,"nodeType":"47","endLine":103,"endColumn":104},{"ruleId":"45","severity":1,"message":"46","line":106,"column":60,"nodeType":"47","endLine":106,"endColumn":210},{"ruleId":"48","severity":1,"message":"49","line":36,"column":3,"nodeType":"50","messageId":"51","endLine":38,"endColumn":4},{"ruleId":"45","severity":1,"message":"46","line":63,"column":7,"nodeType":"47","endLine":63,"endColumn":65},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-extend-native","Array prototype is read only, properties should not be added.","AssignmentExpression","unexpected","no-global-assign","no-unsafe-negation"]